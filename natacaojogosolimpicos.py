# -*- coding: utf-8 -*-
"""NatacaoJogosOlimpicos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aLldHSMdRtVNPOG03MKc44MK7pReQ_Mm
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
import numpy as np


file_path = "Olympic_Swimming_Results_1912to2020.csv"
try:
    df = pd.read_csv(file_path)
    print("Dataset carregado com sucesso!\n")
except FileNotFoundError:
    print(f"Erro: O arquivo '{file_path}' não foi encontrado. Certifique-se de que ele foi carregado corretamente.")
    exit()


features = ['Distance (in meters)', 'Stroke', 'Relay?', 'Gender', 'Team']
X = df[features].copy()
y = df['Rank']


print("\nInformações sobre o dataset:\n")
df.info()

print("\nFeatures selecionadas:")
print(X.head())
print("\nClasse (label) selecionada:")
print(y.head())


X['Distance (in meters)'] = X['Distance (in meters)'].str.replace('m', '', regex=False)
X['Distance (in meters)'] = X['Distance (in meters)'].apply(lambda x: eval(x.replace('x', '*')) if 'x' in str(x) else float(x))
X['Distance (in meters)'] = X['Distance (in meters)'].astype(int)


le_stroke = LabelEncoder()
le_gender = LabelEncoder()
le_team = LabelEncoder()

X['Stroke_encoded'] = le_stroke.fit_transform(X['Stroke'])
X['Gender_encoded'] = le_gender.fit_transform(X['Gender'])
X['Team_encoded'] = le_team.fit_transform(X['Team'])


X_encoded = X.drop(columns=['Stroke', 'Gender', 'Team'])

print("\nFeatures após a codificação:")
print(X_encoded.head())


print("\nLegenda de Codificação:")
print("-----------------------")

print("\nStroke (Tipo de nado):")
for i, name in enumerate(le_stroke.classes_):
    print(f"{name}: {i}")

print("\nGender (Gênero):")
for i, name in enumerate(le_gender.classes_):
    print(f"{name}: {i}")

print("\nTeam (Equipe):")
for i, name in enumerate(le_team.classes_):
    print(f"{name}: {i}")


tree_model = DecisionTreeClassifier()
tree_model.fit(X_encoded, y)
print("\nModelo de árvore de decisão treinado com sucesso!")


new_data = pd.DataFrame([[50, 'Freestyle', 0, 'Men', 'BRA']],
                        columns=['Distance (in meters)', 'Stroke', 'Relay?', 'Gender', 'Team'])


new_data['Stroke_encoded'] = le_stroke.transform(new_data['Stroke'])
new_data['Gender_encoded'] = le_gender.transform(new_data['Gender'])
new_data['Team_encoded'] = le_team.transform(new_data['Team'])
new_data_encoded = new_data.drop(columns=['Stroke', 'Gender', 'Team'])


predicted_rank = tree_model.predict(new_data_encoded)

print("\nDados de entrada para a previsão:\n")
print(new_data)
print(f"\nO Rank previsto para a corrida é: {predicted_rank[0]}")